
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_ArtefactsCorrection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_ArtefactsCorrection.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_ArtefactsCorrection.py:


Outliers and ectobeats correction
=================================

Here, we describe two method for artefacts and outliers correction, after
detection using the method proposed by Lipponen & Tarvainen (2019) [1]_.

.. GENERATED FROM PYTHON SOURCE LINES 8-22

.. code-block:: default


    # Author: Nicolas Legrand <nicolas.legrand@cfin.au.dk>
    # Licence: GPL v3

    # This example describe two approaches for RR artefacts correction:
    # * `correct_rr()` will find and correct artefacts in the RR time series. The
    # signal length will possibly change after the interpolation of long, short or
    # ectopic beats. This method is more relevant for HRV analyse of long recording
    # where the timing of experimental events is not important.
    # * `correct_peaks()` will find and correct artefacts in a boolean peaks
    # vector, thus ensuring the length of recording remain constant and corrected
    # peaks fit the signal sampling rate. This method is more adapted to
    # event-related cardiac activity designs.








.. GENERATED FROM PYTHON SOURCE LINES 23-34

.. code-block:: default

    import numpy as np
    from systole import import_dataset1
    from systole.detection import ecg_peaks
    from systole.correction import correct_peaks, correct_rr
    from systole.utils import input_conversion
    from systole.plots import plot_rr
    from bokeh.io import output_notebook
    from bokeh.plotting import show
    output_notebook()









.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    ecg_df = import_dataset1(modalities=['ECG', 'Stim'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|                                                                                                               | 0/2 [00:00<?, ?it/s]    Downloading ECG channel:   0%|                                                                                      | 0/2 [00:00<?, ?it/s]    Downloading ECG channel:  50%|#######################################                                       | 1/2 [00:01<00:01,  1.44s/it]    Downloading Stim channel:  50%|######################################5                                      | 1/2 [00:01<00:01,  1.44s/it]    Downloading Stim channel: 100%|#############################################################################| 2/2 [00:02<00:00,  1.49s/it]    Downloading Stim channel: 100%|#############################################################################| 2/2 [00:02<00:00,  1.49s/it]




.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    signal, peaks = ecg_peaks(ecg_df.ecg, method='pan-tompkins', sfreq=1000)








.. GENERATED FROM PYTHON SOURCE LINES 41-45

#############################
Let's first convert the R peaks previously detected to RR intervals.

import an example time series of RR interval. Here, `rr` is simplys a 1d Numpy array of intervals expressed in miliseconds (ms).

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    rr_ms = input_conversion(peaks, input_type="peaks", output_type="rr_ms")








.. GENERATED FROM PYTHON SOURCE LINES 48-49

We can visualize this series using Systole's built in `plot_rr` function. Here we are using Bokeh as plotting backend.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: default


    show(
        plot_rr(rr_ms, input_type='rr_ms', backend='bokeh', figsize=300)
    )







.. GENERATED FROM PYTHON SOURCE LINES 54-55

#############################

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: default

    rr_correction = correct_rr(rr_ms)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

#############################

.. GENERATED FROM PYTHON SOURCE LINES 61-62

Here, we are going to add false extra and missed peaks (by adding and removing ones in the peaks vector).

.. GENERATED FROM PYTHON SOURCE LINES 62-75

.. code-block:: default

    corrupted_peaks = peaks

    np.random.seed(123)
    # Create 100 missed peaks
    corrupted_peaks[
        np.random.choice(np.where(corrupted_peaks)[0], 50)
        ] = 0

    # Create 100 extra peaks
    corrupted_peaks[
        np.random.choice(len(peaks), 50)
        ] = 1








.. GENERATED FROM PYTHON SOURCE LINES 76-77

We can visualize the corrupted vector (this time setting `show_artefacts` to `True`).

.. GENERATED FROM PYTHON SOURCE LINES 77-83

.. code-block:: default

    show(
        plot_rr(
            corrupted_peaks, input_type='peaks', backend='bokeh', figsize=300,
            show_artefacts=True)
    )








.. GENERATED FROM PYTHON SOURCE LINES 84-93

We can see that this procedure has successfully created 50 extra and 50 missed peaks
in the signal. We can see that some of the extra peaks are even falling in the red
area in the plot above. This area cover all values below 200ms and above 3000ms and 
are considered as physiologically unlikely/impossible RR intervals for humans that
should be discared automatically most of the time. We will try to correct that using 
Systole's `correct_peaks` function. Contrarily to `correct_rr`, this function operate 
at the peaks detection level and will keep the lenght of the signal constant. This
can be especially usefull when we want to look at the evolution of RR interval in
response to specific events.

.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: default


    peaks_correction = correct_peaks(corrupted_peaks)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ... correcting 47 extra peak(s).
    ... correcting 44 missed peak(s).




.. GENERATED FROM PYTHON SOURCE LINES 97-99

We can see that the function is doing a good job at detection and correcting peaks.
47/50 extra and 44/50 missed were corrected here.

.. GENERATED FROM PYTHON SOURCE LINES 99-105

.. code-block:: default

    show(
        plot_rr(
            peaks_correction["clean_peaks"], input_type='peaks', backend='bokeh', 
            figsize=300, show_artefacts=True)
    )








.. GENERATED FROM PYTHON SOURCE LINES 106-112

References
----------
.. [1] Lipponen, J. A., & Tarvainen, M. P. (2019). A robust algorithm for
  heart rate variability time series artefact correction using novel
  beat classification. Journal of Medical Engineering & Technology,
  43(3), 173â€“181. https://doi.org/10.1080/03091902.2019.1640306


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.942 seconds)


.. _sphx_glr_download_auto_examples_plot_ArtefactsCorrection.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_ArtefactsCorrection.py <plot_ArtefactsCorrection.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_ArtefactsCorrection.ipynb <plot_ArtefactsCorrection.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

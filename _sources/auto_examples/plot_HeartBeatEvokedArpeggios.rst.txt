
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_HeartBeatEvokedArpeggios.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_HeartBeatEvokedArpeggios.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_HeartBeatEvokedArpeggios.py:


Heartbeat Evoked Arpeggios
============================

This tutorial illustrates how to use the ``Oximeter`` class to trigger stimuli
at different phases of the cardiac cycle using the [Psychopy](https://www.psychopy.org/)
toolbox. The PPG signal is recorded for 30 seconds and peaks are detected
online. Four notes ('C', 'E', 'G', 'Bfl') are played in synch with peak
detection with various delays: no delay,  1/4, 2/4 or 3/4 of the previous
cardiac cycle length. While R-R intervals are prone to large changes over longer
timescales, such changes are physiologically limited from one heartbeat to the next,
limiting variance in the onset synchrony between the tones and the cardiac cycle.
On this basis, each presentation time is calibrated based on the previous RR-interval.
This procedure can easily be adapted to create a standard interoception task, e.g. by either presenting
tones at no delay (systole, s+) or at a fixed offset (diastole, s-).

.. GENERATED FROM PYTHON SOURCE LINES 17-34

.. code-block:: default


    # Author: Nicolas Legrand <nicolas.legrand@cfin.au.dk>
    # Licence: GPL v3

    import itertools
    import time

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from psychopy.sound import Sound

    from systole import serialSim
    from systole.plots import plot_circular
    from systole.recording import Oximeter
    from systole.utils import norm_triggers, to_angles





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    C:\ProgramData\Anaconda3\lib\site-packages\seaborn\cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 35-39

Recording
---------
For the purpose of demonstration, here we simulate data acquisition through
the pulse oximeter using pre-recorded signal.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default


    ser = serialSim()








.. GENERATED FROM PYTHON SOURCE LINES 43-46

If you want to allow online data acquisition, you should uncomment the
following lines and provide the reference of the COM port where the pulse
oximeter is plugged in.

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: python

  import serial
  ser = serial.Serial('COM4')  # Change this value according to your setup

.. GENERATED FROM PYTHON SOURCE LINES 54-55

Create an Oximeter instance, initialize recording and record for 10 seconds

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    oxi = Oximeter(serial=ser, sfreq=75, add_channels=4).setup()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reset input buffer




.. GENERATED FROM PYTHON SOURCE LINES 59-60

Create an Oxymeter instance, initialize recording and record for 10 seconds

.. GENERATED FROM PYTHON SOURCE LINES 60-114

.. code-block:: default


    beat = Sound("C", secs=0.1)
    diastole1 = Sound("E", secs=0.1)
    diastole2 = Sound("G", secs=0.1)
    diastole3 = Sound("Bfl", secs=0.1)

    systoleTime1, systoleTime2, systoleTime3 = None, None, None
    tstart = time.time()
    while time.time() - tstart < 30:

        # Check if there are new data to read
        while oxi.serial.inWaiting() >= 5:

            # Convert bytes into list of int
            paquet = list(oxi.serial.read(5))

            if oxi.check(paquet):  # Data consistency
                oxi.add_paquet(paquet[2])  # Add new data point

            # T + 0
            if oxi.peaks[-1] == 1:
                beat = Sound("C", secs=0.1)
                beat.play()
                systoleTime1 = time.time()
                systoleTime2 = time.time()
                systoleTime3 = time.time()

            # T + 1/4
            if systoleTime1 is not None:
                if time.time() - systoleTime1 >= ((oxi.instant_rr[-1] / 4) / 1000):
                    diastole1 = Sound("E", secs=0.1)
                    diastole1.play()
                    systoleTime1 = None

            # T + 2/4
            if systoleTime2 is not None:
                if time.time() - systoleTime2 >= (((oxi.instant_rr[-1] / 4) * 2) / 1000):
                    diastole2 = Sound("G", secs=0.1)
                    diastole2.play()
                    systoleTime2 = None

            # T + 3/4
            if systoleTime3 is not None:
                if time.time() - systoleTime3 >= (((oxi.instant_rr[-1] / 4) * 3) / 1000):
                    diastole3 = Sound("A", secs=0.1)
                    diastole3.play()
                    systoleTime3 = None

            # Track the note status
            oxi.channels["Channel_0"][-1] = beat.status
            oxi.channels["Channel_1"][-1] = diastole1.status
            oxi.channels["Channel_2"][-1] = diastole2.status
            oxi.channels["Channel_3"][-1] = diastole3.status








.. GENERATED FROM PYTHON SOURCE LINES 115-117

Events
--------

.. GENERATED FROM PYTHON SOURCE LINES 117-122

.. code-block:: default


    f, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 5), sharex=True)

    plt.tight_layout()




.. image:: /auto_examples/images/sphx_glr_plot_HeartBeatEvokedArpeggios_001.png
    :alt: plot HeartBeatEvokedArpeggios
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 123-125

Cardiac cycle
-------------

.. GENERATED FROM PYTHON SOURCE LINES 125-138

.. code-block:: default


    angles = []
    x = np.asarray(oxi.peaks)
    for ev in oxi.channels:
        events = norm_triggers(
            np.asarray(oxi.channels[ev]), threshold=1, n=40, direction="higher"
        )
        angles.append(to_angles(np.where(x)[0], np.where(events)[0]))

    palette = itertools.cycle(sns.color_palette("deep"))
    ax = plt.subplot(111, polar=True)
    for i in angles:
        plot_circular(i, color=next(palette), ax=ax)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_HeartBeatEvokedArpeggios_002.png
          :alt: plot HeartBeatEvokedArpeggios
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_HeartBeatEvokedArpeggios_003.png
          :alt: plot HeartBeatEvokedArpeggios
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_HeartBeatEvokedArpeggios_004.png
          :alt: plot HeartBeatEvokedArpeggios
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_HeartBeatEvokedArpeggios_005.png
          :alt: plot HeartBeatEvokedArpeggios
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_HeartBeatEvokedArpeggios_006.png
          :alt: plot HeartBeatEvokedArpeggios
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  34.888 seconds)


.. _sphx_glr_download_auto_examples_plot_HeartBeatEvokedArpeggios.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_HeartBeatEvokedArpeggios.py <plot_HeartBeatEvokedArpeggios.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_HeartBeatEvokedArpeggios.ipynb <plot_HeartBeatEvokedArpeggios.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
